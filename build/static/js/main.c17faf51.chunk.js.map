{"version":3,"sources":["components/Filter.jsx","components/PersonForm.jsx","components/Persons.jsx","components/Notification.jsx","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filterInput","handleFilter","type","value","onChange","PersonForm","addPerson","newNameInput","handleNameInputChange","newNbInput","handleNbInputChange","onSubmit","Person","name","number","deletePerson","onClick","Persons","persons","map","person","key","Notification","notification","className","message","baseUrl","getAll","a","axios","get","request","data","create","newObject","post","update","id","put","delete","App","useState","setPersons","setNewNameInput","setNewNbInput","setFilterInput","setNotification","useEffect","personService","then","initialPersons","console","log","personsToDisplay","filter","toLowerCase","includes","event","target","preventDefault","newPerson","personToUpdate","find","window","confirm","personUpdated","catch","e","setTimeout","returnedPerson","prev","error","response","personToDelete","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c17faf51.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({ filterInput, handleFilter }) => {\n\n  return (\n    <div>\n      filter shown with <input type='text' value={filterInput} onChange={handleFilter} />\n    </div>\n  )\n}\n\nexport default Filter\n","import React from 'react'\n\nconst PersonForm = ({ addPerson, newNameInput, handleNameInputChange, newNbInput, handleNbInputChange }) => {\n\n  return (\n    <div>\n      <form onSubmit={addPerson}>\n        <div>name: <input value={newNameInput} onChange={handleNameInputChange} /></div>\n        <div>number: <input value={newNbInput} onChange={handleNbInputChange} /></div>\n        <div><button type='submit'>add</button></div>\n      </form>\n    </div>\n  )\n}\n\nexport default PersonForm\n","import React from 'react'\r\n\r\nconst Person = ({ name, number, deletePerson }) => {\r\n  return (\r\n    <div>{name} {number} <button onClick={deletePerson}>delete</button></div>\r\n  )\r\n}\r\n\r\n\r\nconst Persons = ({ persons, deletePerson }) => {\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {persons.map(person => <Person name={person.name} number={person.number} key={person.name} deletePerson={() => deletePerson(person.name)} />)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Persons\r\n","import  React  from 'react';\r\n\r\nconst Notification = ({notification }) => {\r\n\r\n  if(notification === null ){\r\n    return null\r\n  }\r\n\r\n  \r\n\r\n  return(\r\n    <div className={notification.type}>\r\n      {notification.message}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default Notification","import axios from 'axios'\r\n// const baseUrl = \"http://localhost:3001/persons\"\r\nconst baseUrl = \"api/persons\"\r\n\r\n\r\nconst getAll = async () => {\r\n  const request = await axios.get(baseUrl)\r\n  return await request.data\r\n}\r\nconst create = async (newObject) => {\r\n  const request = await axios.post(baseUrl, newObject)\r\n  return await request.data\r\n}\r\n\r\nconst update = async (id, newObject) => {\r\n  const request = await axios.put(`${baseUrl}/${id}`, newObject)\r\n  return await request.data\r\n}\r\n\r\nconst remove = async (id) => {\r\n  const request = await axios.delete(`${baseUrl}/${id}`)\r\n  return await request.data\r\n}\r\n\r\nexport default { getAll, create, update, delete: remove }\r\n// default, module with no name can be named in import  => import personService from './services/persons'","import React, { useState, useEffect } from 'react'\r\nimport Filter from './components/Filter'\r\nimport PersonForm from './components/PersonForm'\r\nimport Persons from './components/Persons'\r\nimport Notification from './components/Notification'\r\nimport personService from './services/persons'\r\n\r\n\r\n\r\nconst App = function () {\r\n\r\n  // hooks\r\n  const [persons, setPersons] = useState([])\r\n  const [newNameInput, setNewNameInput] = useState('')\r\n  const [newNbInput, setNewNbInput] = useState('')\r\n  const [filterInput, setFilterInput] = useState('')\r\n  const [notification, setNotification] = useState(null)\r\n\r\n  useEffect(() => {\r\n    personService.getAll().then(initialPersons => {\r\n      console.log(initialPersons)\r\n      setPersons(initialPersons)\r\n    })\r\n  }, [])\r\n\r\n\r\n\r\n\r\n\r\n  // Input Handlers of controlled components\r\n  const handleNameInputChange = event => setNewNameInput(event.target.value)\r\n  const handleFilter = event => setFilterInput(event.target.value.toLowerCase())\r\n  const handleNbInputChange = event => setNewNbInput(event.target.value)\r\n  // vs inside: <div>number: <input value={newNbInput} onChange={event => setNewNbInput(event.target.value)} /></div>\r\n\r\n  //Event Listners\r\n  const addPerson = (event) => {\r\n    event.preventDefault()\r\n    const newPerson = {\r\n      name: newNameInput,\r\n      number: newNbInput,\r\n    }\r\n    const personToUpdate = persons.find(person =>  person.name.toLowerCase() === newNameInput.toLowerCase())\r\n    if (personToUpdate) {\r\n      const isAnUpdate = window.confirm(`\"${personToUpdate.name}\" is already added to the phonebook, replace the old number with a new one?`)\r\n      if (isAnUpdate) {\r\n        personService.update(personToUpdate.id, newPerson).then(personUpdated => {\r\n          setPersons(persons.map(person => person.id === personToUpdate.id ? personUpdated : person))\r\n        }).catch((e)=> {\r\n          setNotification({\r\n            message: \"information of \"+personToUpdate.name+\" has already been removed from server\",\r\n            type: \"notification error\"\r\n          })\r\n          setTimeout(()=>setNotification(null) , 3000)\r\n          setPersons(persons.filter(person => person.id !== personToUpdate.id))\r\n        })\r\n      }\r\n    }\r\n    else {\r\n      personService\r\n        .create(newPerson)\r\n        .then(returnedPerson => {\r\n          // functional form of setState\r\n          setPersons(prev => [...prev, returnedPerson])\r\n          \r\n          setNotification({\r\n            message: \"Added \"+returnedPerson.name,\r\n            type: \"notification confirmation\"\r\n          })\r\n          setTimeout(()=>setNotification(null) , 3000)\r\n        })\r\n        .catch(error => {\r\n          console.log(error.response.data.error)\r\n          setNotification({\r\n            message: error.response.data.error,\r\n            type: \"notification error\"\r\n          })\r\n          setTimeout(()=>setNotification(null) , 3000)\r\n        })\r\n    }\r\n    setNewNameInput('')\r\n    setNewNbInput('')\r\n  }\r\n\r\n  const deletePerson = (name) => {\r\n    const personToDelete = persons.find(person => person.name === name)\r\n    const isSure = window.confirm(`Do you really want to delete ${personToDelete.name}`)\r\n    if (isSure) {\r\n      personService.delete(personToDelete.id).then(() => {\r\n        setNotification({\r\n          message: personToDelete.name+\" has been deleted\" ,\r\n          type: \"notification confirmation\"\r\n        })\r\n        setTimeout(()=>setNotification(null) , 3000)\r\n      })\r\n      setPersons(persons.filter(person => personToDelete.name !== person.name))\r\n    }\r\n  }\r\n\r\n  //  Filters\r\n  const personsToDisplay = persons.filter(person => person.name.toLowerCase().includes(filterInput))\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification notification={notification}/>\r\n      <Filter filterInput={filterInput} handleFilter={handleFilter} />\r\n      <h2>Add a new contact</h2>\r\n      <PersonForm addPerson={addPerson} newNameInput={newNameInput} handleNameInputChange={handleNameInputChange}\r\n        newNbInput={newNbInput} handleNbInputChange={handleNbInputChange} />\r\n      <h2>Numbers</h2>\r\n      <Persons persons={personsToDisplay} deletePerson={deletePerson} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<React.StrictMode> <App /> </React.StrictMode>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}